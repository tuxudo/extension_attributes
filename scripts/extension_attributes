#!/usr/local/munkireport/munkireport-python2
# Python scirpt to process Jamf extension attribute xml files

import subprocess
import os
import sys
import string
import re
from xml.etree import cElementTree as ElementTree

sys.path.insert(0, '/usr/local/munki')
sys.path.insert(0, '/usr/local/munkireport')

from munkilib import FoundationPlist
from munkilib import utils
from Foundation import CFPreferencesCopyAppValue

def process_ea_xml(ea_xml):
    
    tree = ElementTree.parse(ea_xml)
    root = tree.getroot()
    xmldict = XmlDictConfig(root)
    script_contents = xmldict['scriptContentsMac'].replace("\r", "").rstrip()

    # Check if sudo is being used in script and throw warning
    if 'sudo ' in script_contents:
        print "WARNING: 'sudo' should not be used in extension attribute scripts - " + ea_xml

    proc = subprocess.Popen(script_contents, shell=True, bufsize=-1, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    
    ea_item = {}
    ea_item['jamf_ea'] = True
    ea_item['displayname'] = xmldict['displayName']
    
    if 'displayincategory' in ea_item:
        ea_item['displayincategory'] = xmldict['displayInCategory']
    if 'dataType' in ea_item:
        ea_item['datatype'] = xmldict['dataType']
        
    ea_item['result'] = remove_all('</result>', remove_all('<result>', output)).strip()

    return ea_item

class XmlListConfig(list):
    def __init__(self, aList):
        for element in aList:
            if element:
                # treat like dict
                if len(element) == 1 or element[0].tag != element[1].tag:
                    self.append(XmlDictConfig(element))
                # treat like list
                elif element[0].tag == element[1].tag:
                    self.append(XmlListConfig(element))
            elif element.text:
                text = element.text.strip()
                if text:
                    self.append(text)

class XmlDictConfig(dict):
    '''
    Example usage:

    >>> tree = ElementTree.parse('your_file.xml')
    >>> root = tree.getroot()
    >>> xmldict = XmlDictConfig(root)

    Or, if you want to use an XML string:

    >>> root = ElementTree.XML(xml_string)
    >>> xmldict = XmlDictConfig(root)

    And then use xmldict for what it is... a dict.
    '''
    def __init__(self, parent_element):
        if parent_element.items():
            self.update(dict(parent_element.items()))
        for element in parent_element:
            if element:
                # treat like dict - we assume that if the first two tags
                # in a series are different, then they are all different.
                if len(element) == 1 or element[0].tag != element[1].tag:
                    aDict = XmlDictConfig(element)
                # treat like list - we assume that if the first two tags
                # in a series are the same, then the rest are the same.
                else:
                    # here, we put the list in dictionary; the key is the
                    # tag name the list elements all share in common, and
                    # the value is the list itself 
                    aDict = {element[0].tag: XmlListConfig(element)}
                # if the tag has attributes, add those to the dict
                if element.items():
                    aDict.update(dict(element.items()))
                self.update({element.tag: aDict})
            # this assumes that if you've got an attribute in a tag,
            # you won't be having any text. This may or may not be a 
            # good idea -- time will tell. It works for the way we are
            # currently doing XML configuration files...
            elif element.items():
                self.update({element.tag: dict(element.items())})
            # finally, if there are no child tags and no attributes, extract
            # the text
            else:
                self.update({element.tag: element.text})   

def remove_all(substr, str):
    index = 0
    length = len(substr)
    while string.find(str, substr) != -1:
        index = string.find(str, substr)
        str = str[0:index] + str[index+length:]
    return str


def main():

    """Main"""
    # Create cache dir if it does not exist
    cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
    if not os.path.exists(cachedir):
        os.makedirs(cachedir)

    # Skip manual check
    if len(sys.argv) > 1:
        if sys.argv[1] == 'manualcheck':
            print 'Manual check: skipping'
            exit(0)

    # Set the encoding
    reload(sys)
    sys.setdefaultencoding('utf8')

    result = []
    
    # Load and clean existing cache file of Jamf EAs
    if os.path.isfile(os.path.join(cachedir, 'extension_attributes.plist')):
        ea_cache = FoundationPlist.readPlist(os.path.join(cachedir, 'extension_attributes.plist'))
        for e_a in ea_cache:
            if "jamf_ea" in e_a and e_a["jamf_ea"]is True:
                continue
            else:
                result.append(e_a)

    # Process each Jamf ea.xml
    path = '/usr/local/munkireport/extension_attributes'
    if os.path.isdir(path):
        for filename in os.listdir(path):
            if not filename.endswith('.xml') and not filename.endswith('.XML'): continue
            script = os.path.join(path, filename)
            
            try:
                # Verify permissions of Jamf ea.xml file
                utils.verifyFileOnlyWritableByMunkiAndRoot(script)
                result.append(process_ea_xml(script))
                
            except utils.VerifyFilePermissionsError, e:
                msg = (
                    "   Skipping execution due to failed file permissions verification: %s\n%s" % (script, str(e))
                )
                print msg
                continue

    # Write extension attribute results to cache file
    output_plist = os.path.join(cachedir, 'extension_attributes.plist')
    FoundationPlist.writePlist(result, output_plist)
#    print FoundationPlist.writePlistToString(result)

if __name__ == "__main__":
    main()
